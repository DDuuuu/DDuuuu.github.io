<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>HeadFirst设计模式 - 标签 - AndrewDu&#39;s blog</title>
    <link>https://DDuuuu.github.io/tags/headfirst%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>HeadFirst设计模式 - 标签 | AndrewDu&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>978089234@qq.com (AndrewDu)</managingEditor>
      <webMaster>978089234@qq.com (AndrewDu)</webMaster><copyright>Copyright© Andrew.Du</copyright><lastBuildDate>Mon, 25 Nov 2019 17:09:22 &#43;0800</lastBuildDate><atom:link href="https://DDuuuu.github.io/tags/headfirst%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
  <title>HeadFirst设计模式 装饰 适配器</title>
  <link>https://DDuuuu.github.io/2019/11/designpattern14-headfirst/</link>
  <pubDate>Mon, 25 Nov 2019 17:09:22 &#43;0800</pubDate>
  <author>AndrewDu</author>
  <guid>https://DDuuuu.github.io/2019/11/designpattern14-headfirst/</guid>
  <description><![CDATA[1 装饰者模式 星巴克咖啡 饮料 总结 如果说策略模式是通过组合实现弹性，那么装饰者模式就是通过继承来实现，在实现的同时，客户基本感觉不到使用了装饰者]]></description>
</item>
<item>
  <title>重构改善既有代码 策略 工厂 命令 状态</title>
  <link>https://DDuuuu.github.io/2019/11/designpattern13-headfirst/</link>
  <pubDate>Tue, 12 Nov 2019 17:09:22 &#43;0800</pubDate>
  <author>AndrewDu</author>
  <guid>https://DDuuuu.github.io/2019/11/designpattern13-headfirst/</guid>
  <description><![CDATA[1 策略模式 鸭子飞行和嘎嘎叫策略 2 工厂模式 简单工厂简单的pizza工厂 通过一个工厂类的方法，创建和返回对象实例 原来混乱的代码： 修改后 简单工厂类]]></description>
</item>
</channel>
</rss>
