<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>重构改善既有代码 - 标签 - AndrewDu&#39;s blog</title>
    <link>https://DDuuuu.github.io/tags/%E9%87%8D%E6%9E%84%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81/</link>
    <description>重构改善既有代码 - 标签 | AndrewDu&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>978089234@qq.com (AndrewDu)</managingEditor>
      <webMaster>978089234@qq.com (AndrewDu)</webMaster><copyright>Copyright© Andrew.Du</copyright><lastBuildDate>Fri, 15 Nov 2019 17:09:22 &#43;0800</lastBuildDate><atom:link href="https://DDuuuu.github.io/tags/%E9%87%8D%E6%9E%84%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81/" rel="self" type="application/rss+xml" /><item>
  <title>重构改善既有代码 大型重构</title>
  <link>https://DDuuuu.github.io/2019/11/designpattern12-refactoring8/</link>
  <pubDate>Fri, 15 Nov 2019 17:09:22 &#43;0800</pubDate>
  <author>AndrewDu</author>
  <guid>https://DDuuuu.github.io/2019/11/designpattern12-refactoring8/</guid>
  <description><![CDATA[大型重构 1、梳理并分解继承体系 Tease Apart Inheritance 就是让每个类的职责更明确更单一，当一个类的职责混乱时，通过绘制职责图来分离职责，并创建另一个超类，将相关]]></description>
</item>
<item>
  <title>重构改善既有代码 处理继承关系</title>
  <link>https://DDuuuu.github.io/2019/11/designpattern11-refactoring7/</link>
  <pubDate>Thu, 14 Nov 2019 17:09:22 &#43;0800</pubDate>
  <author>AndrewDu</author>
  <guid>https://DDuuuu.github.io/2019/11/designpattern11-refactoring7/</guid>
  <description><![CDATA[1、字段上移 Pull Up Field 动机 减少重复 什么时候做 两个子类拥有相同的字段 怎么做 将该字段移至超类 2、函数上移 Pull Up Method 动机 滋生错误 避免重复 什么时候做 有些函数]]></description>
</item>
<item>
  <title>重构改善既有代码 简化函数调用</title>
  <link>https://DDuuuu.github.io/2019/11/designpattern10-refactoring6/</link>
  <pubDate>Wed, 13 Nov 2019 17:09:22 &#43;0800</pubDate>
  <author>AndrewDu</author>
  <guid>https://DDuuuu.github.io/2019/11/designpattern10-refactoring6/</guid>
  <description><![CDATA[所有的数据都应该隐藏起来。 1、函数改名 Rename Method 动机 将复杂的处理过程分解成小函数。 什么时候做 函数名称未能揭示函数的用途 怎么做 修改函数名称 2、添加参]]></description>
</item>
<item>
  <title>重构改善既有代码 简化条件表达式</title>
  <link>https://DDuuuu.github.io/2019/11/designpattern9-refactoring5/</link>
  <pubDate>Tue, 12 Nov 2019 17:09:22 &#43;0800</pubDate>
  <author>AndrewDu</author>
  <guid>https://DDuuuu.github.io/2019/11/designpattern9-refactoring5/</guid>
  <description><![CDATA[1、分解条件表达式 Decompose Conditional 动机 复杂的条件逻辑是最常导致复杂度上升的地点之一， 什么时候做 有一个复杂的条件语句 怎么做 从if，then,else三个段]]></description>
</item>
<item>
  <title>重构改善既有代码 重新组织数据</title>
  <link>https://DDuuuu.github.io/2019/11/designpattern8-refactoring4/</link>
  <pubDate>Mon, 11 Nov 2019 17:09:22 &#43;0800</pubDate>
  <author>AndrewDu</author>
  <guid>https://DDuuuu.github.io/2019/11/designpattern8-refactoring4/</guid>
  <description><![CDATA[**对于这个类的任何修改都应该通过该类的方法。类拥有一些数据却无所觉，拥有一些依赖无所觉是非常危险的。**所以才要封装字段，封装集合，监视数]]></description>
</item>
<item>
  <title>重构改善既有代码 在对象之间搬移特性</title>
  <link>https://DDuuuu.github.io/2019/11/designpattern7-refactoring3/</link>
  <pubDate>Sun, 10 Nov 2019 17:09:22 &#43;0800</pubDate>
  <author>AndrewDu</author>
  <guid>https://DDuuuu.github.io/2019/11/designpattern7-refactoring3/</guid>
  <description><![CDATA[在面向对象的设计中，决定把责任放在哪里。 先使用移动字段，在移动方法 1、搬移函数 Move Method 动机 一个类与另一个类高度耦合，就会搬移函数，通过这种手段，]]></description>
</item>
<item>
  <title>重构改善既有代码 重新组织函数</title>
  <link>https://DDuuuu.github.io/2019/11/designpattern6-refactoring2/</link>
  <pubDate>Sat, 09 Nov 2019 17:09:22 &#43;0800</pubDate>
  <author>AndrewDu</author>
  <guid>https://DDuuuu.github.io/2019/11/designpattern6-refactoring2/</guid>
  <description><![CDATA[对函数的重构方法 1、提炼函数 ExtractMethod 动机 每个函数的颗粒度都比较小，高层函数读起来就像是注释 颗粒度比较小覆写也比较容易 什么时候需要提炼函数 当函数体的]]></description>
</item>
<item>
  <title>重构改善既有代码 坏代码的味道</title>
  <link>https://DDuuuu.github.io/2019/11/designpattern5-refactoring1/</link>
  <pubDate>Fri, 08 Nov 2019 17:09:22 &#43;0800</pubDate>
  <author>AndrewDu</author>
  <guid>https://DDuuuu.github.io/2019/11/designpattern5-refactoring1/</guid>
  <description><![CDATA[第一次做某件事情的时候尽管去做，第二次做类似的事会产生反感，第三次再做类似的事，你就应该重构。 小型函数优美动人 一个类最好是常量类，任何的改变]]></description>
</item>
</channel>
</rss>
